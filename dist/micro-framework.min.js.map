{"version":3,"file":"micro-framework.min.js","sources":["../src/constants.js","../src/EventManager.js","../src/ModuleManager.js","../src/Router.js","../src/MicroFramework.js","../src/index.js"],"sourcesContent":["/**\n * Centralized Event Registry - All framework events defined here\n */\nexport const EVENTS = {\n    // Framework lifecycle\n    FRAMEWORK_READY: 'framework:ready',\n    FRAMEWORK_DESTROYED: 'framework:destroyed',\n    \n    // Module events  \n    MODULE_REGISTERED: 'module:registered',\n    MODULE_UNREGISTERED: 'module:unregistered',\n    MODULE_LOAD: 'module:load',\n    MODULE_ERROR: 'module:error',\n    \n    // Route events\n    ROUTE_REGISTERED: 'route:registered',\n    ROUTE_WILL_CHANGE: 'route:will_change',\n    ROUTE_CHANGE: 'route:change',\n    ROUTE_ERROR: 'route:error',\n    ROUTE_404: 'route:404',\n    \n    // UI events\n    LOADING_CHANGE: 'loading:change',\n    ERROR: 'error',\n    \n    // Container events\n    CONTAINER_REINITIALIZED: 'container:reinitialized',\n    CONTAINER_REMOVED: 'container:removed',\n    CONTAINER_RECOVERED: 'container:recovered',\n    CONTAINER_RECOVERY_FAILED: 'container:recovery_failed',\n    CONTAINER_ERROR: 'container:error',\n    \n    // Plugin events\n    PLUGIN_INSTALLED: 'plugin:installed'\n};","import { EVENTS } from './constants.js';\n\n/**\n * Event Manager - Handles centralized event emission with debugging\n */\nexport class EventManager {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.config = {\n            enableLogging: options.enableLogging || false,\n            logPrefix: options.logPrefix || '[Event]',\n            ...options\n        };\n        this.eventHistory = [];\n        this.maxHistorySize = 100;\n    }\n\n    /**\n     * Emit an event (fire and forget - no response handling)\n     * @param {string} eventName - The event name\n     * @param {*} data - The event data\n     * @param {string} source - The source of the event\n     */\n    emit(eventName, data = null, source = 'framework') {\n        // Validate event name\n        if (!this.isValidEvent(eventName)) {\n            console.warn(`Unknown event emitted: ${eventName}`);\n        }\n\n        // Log event if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} EMIT ${eventName}`, data);\n        }\n\n        // Track in history\n        this.addToHistory(eventName, data, source);\n\n        // Fire and forget - no response handling\n        this.framework.emitRaw(eventName, data);\n    }\n\n    /**\n     * Emit an event and process data through listeners as a filter chain\n     * @param {string} eventName - The event name\n     * @param {*} data - The event data\n     * @param {string} source - The source of the event\n     * @returns {Promise<*>} - Final filtered/transformed data\n     */\n    async filter(eventName, data = null, source = 'framework') {\n        // Validate event name\n        if (!this.isValidEvent(eventName)) {\n            console.warn(`Unknown event emitted: ${eventName}`);\n        }\n\n        // Log event if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} FILTER ${eventName}`, data);\n        }\n\n        // Track in history\n        this.addToHistory(`${eventName}:filter`, data, source);\n\n        // Process data through filter chain\n        const finalData = await this.framework.filterRaw(eventName, data);\n\n        // Log final data if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} FILTER RESULT ${eventName}`, finalData);\n        }\n\n        // Track final data in history\n        this.addToHistory(`${eventName}:filter-result`, finalData, source);\n\n        return finalData;\n    }\n\n    /**\n     * Check if event name is registered\n     */\n    isValidEvent(eventName) {\n        return Object.values(EVENTS).includes(eventName);\n    }\n\n    /**\n     * Add event to history for debugging\n     */\n    addToHistory(eventName, data, source) {\n        const event = {\n            name: eventName,\n            data,\n            source,\n            timestamp: Date.now(),\n            time: new Date().toISOString()\n        };\n\n        this.eventHistory.push(event);\n        \n        // Keep history size manageable\n        if (this.eventHistory.length > this.maxHistorySize) {\n            this.eventHistory.shift();\n        }\n    }\n\n    /**\n     * Get event history for debugging\n     */\n    getHistory() {\n        return [...this.eventHistory];\n    }\n\n    /**\n     * Get all registered event names\n     */\n    getEventNames() {\n        return Object.values(EVENTS);\n    }\n\n    /**\n     * Clear event history\n     */\n    clearHistory() {\n        this.eventHistory = [];\n    }\n}","import { EVENTS } from './constants.js';\n\n/**\n * ModuleManager - Handles module registration, loading, and lifecycle\n */\nexport class ModuleManager {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.modules = new Map();\n        this.currentModule = null;\n        this.config = {\n            moduleBase: options.moduleBase || './modules/',\n            lazy: options.lazy !== false\n        };\n    }\n\n    /**\n     * Register a module\n     */\n    registerModule(name, module) {\n        if (typeof module !== 'object' || !module.render) {\n            throw new Error('Module must be an object with a render method');\n        }\n\n        this.modules.set(name, {\n            name,\n            ...module\n        });\n\n        // Call onRegister lifecycle hook if defined\n        if (module.onRegister) {\n            try {\n                module.onRegister(this.framework.getContext());\n                console.log(`Module '${name}' onRegister hook executed`);\n            } catch (error) {\n                console.error(`Error in onRegister hook for module '${name}':`, error);\n            }\n        }\n\n        // Auto-register routes if module defines them\n        if (module.routes) {\n            let routeCount = 0;\n            \n            if (Array.isArray(module.routes)) {\n                // Legacy array format - still supported\n                module.routes.forEach(routeConfig => {\n                    if (typeof routeConfig === 'string') {\n                        this.framework.router.registerRoute(routeConfig, { \n                            module: name,\n                            handler: 'default'\n                        });\n                        routeCount++;\n                    } else if (routeConfig.path) {\n                        const options = {\n                            module: name,\n                            handler: routeConfig.handler || 'default',\n                            ...routeConfig\n                        };\n                        delete options.path;\n                        this.framework.router.registerRoute(routeConfig.path, options);\n                        routeCount++;\n                    }\n                });\n            } else if (typeof module.routes === 'object') {\n                // New object format: { '/path': options }\n                Object.entries(module.routes).forEach(([path, routeOptions]) => {\n                    const normalizedOptions = this.normalizeRouteOptions(routeOptions);\n                    const options = {\n                        module: name,\n                        ...normalizedOptions\n                    };\n                    \n                    // If useModuleRender is true, don't provide a handler - module loading is enough\n                    if (normalizedOptions.useModuleRender) {\n                        delete options.useModuleRender;\n                        // Don't set options.handler - module loading is sufficient\n                    }\n                    \n                    this.framework.router.registerRoute(path, options);\n                    routeCount++;\n                });\n            }\n            \n            if (routeCount > 0) {\n                console.log(`Auto-registered ${routeCount} routes for module '${name}'`);\n            }\n        }\n\n        this.framework.emit(EVENTS.MODULE_REGISTERED, { name, module });\n        console.log(`Module '${name}' registered`);\n    }\n\n    /**\n     * Normalize different route option formats into standard options object\n     */\n    normalizeRouteOptions(routeOptions) {\n        if (typeof routeOptions === 'string') {\n            // String shorthand: template string\n            return { handler: routeOptions };\n        } else if (typeof routeOptions === 'function') {\n            // Function shorthand: handler function\n            return { handler: routeOptions };\n        } else if (typeof routeOptions === 'object' && routeOptions !== null) {\n            // Full options object - if empty object or no handler, use module render\n            if (Object.keys(routeOptions).length === 0 || !routeOptions.handler) {\n                return { ...routeOptions, useModuleRender: true };\n            }\n            return routeOptions;\n        } else {\n            // Fallback to module render\n            return { useModuleRender: true };\n        }\n    }\n\n    /**\n     * Unregister a module\n     */\n    unregisterModule(name) {\n        const module = this.modules.get(name);\n        if (module) {\n            this.modules.delete(name);\n            this.framework.emit(EVENTS.MODULE_UNREGISTERED, { name, module });\n            console.log(`Module '${name}' unregistered`);\n        }\n    }\n\n    /**\n     * Load a module\n     */\n    async loadModule(name, params = {}) {\n        this.framework.showLoading(true);\n\n        try {\n            let module = this.modules.get(name);\n\n            // Try dynamic import if module not found\n            if (!module && this.config.lazy) {\n                module = await this.dynamicImport(name);\n            }\n\n            if (!module) {\n                throw new Error(`Module '${name}' not found`);\n            }\n\n            // Call beforeMount hook\n            if (module.beforeMount) {\n                await module.beforeMount(params, this.framework.getContext());\n            }\n\n            // Destroy current module\n            if (this.currentModule && this.currentModule.destroy) {\n                await this.currentModule.destroy();\n            }\n\n            // Clear container and render new module\n            const container = this.framework.getContainer();\n            container.innerHTML = '';\n            await module.render(container, params, this.framework.getContext());\n\n            // Call afterMount hook\n            if (module.afterMount) {\n                await module.afterMount(container, params, this.framework.getContext());\n            }\n\n            this.currentModule = module;\n            this.framework.emit(EVENTS.MODULE_LOAD, { name, module, params });\n            \n        } catch (error) {\n            this.framework.emit(EVENTS.MODULE_ERROR, { name, error });\n            this.framework.showError(`Failed to load module: ${name}`, error);\n        } finally {\n            this.framework.showLoading(false);\n        }\n    }\n\n    /**\n     * Dynamic module import\n     */\n    async dynamicImport(name) {\n        try {\n            const modulePath = `${this.config.moduleBase}${name}.js`;\n            const moduleExport = await import(modulePath);\n            const module = moduleExport.default || moduleExport;\n            \n            if (module) {\n                this.registerModule(name, module);\n                return this.modules.get(name);\n            }\n        } catch (error) {\n            console.warn(`Could not dynamically import module: ${name}`, error);\n        }\n        return null;\n    }\n\n    /**\n     * Get current module\n     */\n    getCurrentModule() {\n        return this.currentModule;\n    }\n\n    /**\n     * Get all registered modules\n     */\n    getModules() {\n        return this.modules;\n    }\n}","import { EVENTS } from './constants.js';\n\n/**\n * Router - Handles route registration, navigation, and guards\n */\nexport class Router {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.routes = new Map();\n        this.currentRoute = null;\n        this.config = {\n            mode: options.mode || 'history',\n            base: options.base || '',\n            hashbang: options.hashbang || false,\n            beforeEnter: options.beforeEnter || null,\n            afterEnter: options.afterEnter || null,\n            notFoundHandler: options.notFoundHandler || null // Custom 404 handler\n        };\n\n        // Bind methods\n        this.handleRouteChange = this.handleRouteChange.bind(this);\n    }\n\n    /**\n     * Initialize the router system\n     */\n    initialize() {\n        if (this.config.mode === 'history') {\n            window.addEventListener('popstate', this.handleRouteChange);\n        } else {\n            window.addEventListener('hashchange', this.handleRouteChange);\n        }\n    }\n\n    /**\n     * Handle route changes (browser back/forward)\n     */\n    handleRouteChange() {\n        const currentPath = this.getCurrentRoute();\n        this.navigate(currentPath, { skipHistory: true });\n    }\n\n    /**\n     * Register a route\n     */\n    registerRoute(path, options = {}) {\n        // Handler is required unless module is provided (then module render is used)\n        if (!options.handler && !options.module) {\n            throw new Error('Route must specify either a handler or module in options');\n        }\n\n        // Simplified single signature: registerRoute(path, options)\n        const route = {\n            path,\n            exact: options.exact !== false,\n            beforeEnter: options.beforeEnter,\n            afterEnter: options.afterEnter,\n            module: options.module || null,\n            handler: options.handler || null,\n            ...options\n        };\n\n        this.routes.set(path, route);\n        this.framework.emit(EVENTS.ROUTE_REGISTERED, route);\n        \n        let description = '';\n        if (route.module && route.handler) {\n            description = `module '${route.module}' with handler`;\n        } else if (route.module && !route.handler) {\n            description = `module '${route.module}' (render only)`;\n        } else if (typeof route.handler === 'function') {\n            description = 'function handler';\n        } else if (typeof route.handler === 'string') {\n            description = 'template handler';\n        }\n        \n        console.log(`Route '${path}' registered with ${description}`);\n    }\n\n    /**\n     * Navigate to a route\n     */\n    async navigate(path, options = {}) {\n        const route = this.findMatchingRoute(path);\n        \n        if (!route) {\n            this.handle404(path);\n            return;\n        }\n\n        // Emit will change event before any guards or handlers\n        this.framework.emit(EVENTS.ROUTE_WILL_CHANGE, { \n            to: route, \n            from: this.currentRoute,\n            path \n        });\n\n        // Execute global beforeEnter guard\n        if (this.config.beforeEnter) {\n            const result = await this.config.beforeEnter(route, this.currentRoute);\n            if (result === false) {\n                return; // Navigation cancelled\n            }\n        }\n\n        // Execute route-specific beforeEnter guard\n        if (route.beforeEnter) {\n            const result = await route.beforeEnter(route, this.currentRoute);\n            if (result === false) {\n                return; // Navigation cancelled\n            }\n        }\n\n        // Update browser URL\n        if (!options.skipHistory) {\n            this.updateBrowserUrl(path);\n        }\n\n        // Handle the route based on its type\n        try {\n            await this.handleRoute(route);\n            \n            // Execute route-specific afterEnter hook\n            if (route.afterEnter) {\n                route.afterEnter(route, this.currentRoute);\n            }\n\n            // Execute global afterEnter hook\n            if (this.config.afterEnter) {\n                this.config.afterEnter(route, this.currentRoute);\n            }\n\n            this.currentRoute = route;\n            this.framework.emit(EVENTS.ROUTE_CHANGE, route);\n        } catch (error) {\n            this.framework.emit(EVENTS.ROUTE_ERROR, { route, error });\n            console.error('Navigation error:', error);\n        }\n    }\n\n    /**\n     * Handle a route based on its configuration\n     */\n    async handleRoute(route) {\n        // Load module first if specified\n        if (route.module) {\n            await this.framework.moduleManager.loadModule(route.module, route.params);\n        }\n\n        // Execute handler if specified\n        if (route.handler) {\n            if (typeof route.handler === 'function') {\n                // Function handler\n                await route.handler(route.params, this.framework.getContext(), route);\n            } else if (typeof route.handler === 'string') {\n                // Template handler - render string as HTML\n                this.framework.render(this.processTemplate(route.handler, route.params, this.framework.getContext()));\n            }\n        }\n        // If no handler but module is loaded, that's fine - module.render was called during loadModule\n    }\n\n    /**\n     * Process template string with basic variable substitution\n     */\n    processTemplate(template, params, context) {\n        // Simple template processing - replace {{variable}} with values\n        return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, variable) => {\n            if (params.hasOwnProperty(variable)) {\n                return params[variable];\n            }\n            if (context.hasOwnProperty(variable)) {\n                return context[variable];\n            }\n            return match; // Leave unchanged if no replacement found\n        });\n    }\n\n    /**\n     * Get current route\n     */\n    getCurrentRoute() {\n        if (this.config.mode === 'history') {\n            let path = window.location.pathname;\n            if (this.config.base) {\n                path = path.replace(new RegExp(`^${this.config.base}`), '');\n            }\n            return path || '/';\n        } else {\n            let hash = window.location.hash;\n            if (this.config.hashbang && hash.startsWith('#!')) {\n                return hash.substring(2) || '/';\n            } else if (hash.startsWith('#')) {\n                return hash.substring(1) || '/';\n            }\n            return '/';\n        }\n    }\n\n    /**\n     * Find matching route\n     */\n    findMatchingRoute(path) {\n        // Try exact match first\n        if (this.routes.has(path)) {\n            return { ...this.routes.get(path), params: {} };\n        }\n\n        // Try pattern matching\n        for (const [routePath, route] of this.routes) {\n            const match = this.matchRoute(routePath, path);\n            if (match) {\n                return { ...route, params: match.params };\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Match route with parameters\n     */\n    matchRoute(routePath, actualPath) {\n        const routeParts = routePath.split('/');\n        const actualParts = actualPath.split('/');\n\n        if (routeParts.length !== actualParts.length) {\n            return null;\n        }\n\n        const params = {};\n        const isMatch = routeParts.every((part, index) => {\n            if (part.startsWith(':')) {\n                const paramName = part.substring(1);\n                params[paramName] = actualParts[index];\n                return true;\n            }\n            return part === actualParts[index];\n        });\n\n        return isMatch ? { params } : null;\n    }\n\n    /**\n     * Update browser URL\n     */\n    updateBrowserUrl(path) {\n        if (this.config.mode === 'history') {\n            const fullPath = this.config.base + path;\n            history.pushState({ path }, '', fullPath);\n        } else {\n            const hash = this.config.hashbang ? `#!${path}` : `#${path}`;\n            window.location.hash = hash;\n        }\n    }\n\n    /**\n     * Handle 404 errors\n     */\n    handle404(path) {\n        // Use custom 404 handler if provided\n        if (this.config.notFoundHandler) {\n            if (typeof this.config.notFoundHandler === 'function') {\n                // Function handler - call with path and context\n                this.config.notFoundHandler(path, this.framework.getContext());\n            } else if (typeof this.config.notFoundHandler === 'string') {\n                // String handler - render as HTML with template substitution\n                const template = this.config.notFoundHandler.replace(/\\{\\{path\\}\\}/g, path);\n                this.framework.render(template);\n            } else if (typeof this.config.notFoundHandler === 'object' && this.config.notFoundHandler.module) {\n                // Module handler - load a specific module for 404\n                this.framework.moduleManager.loadModule(this.config.notFoundHandler.module, { path });\n            }\n        } else {\n            // Default 404 handler\n            this.framework.render(`\n                <div class=\"mf-error mf-error-404\">\n                    <h1>404 - Page Not Found</h1>\n                    <p>The route <code>${path}</code> was not found.</p>\n                    <button class=\"mf-btn mf-btn-primary\" onclick=\"window.MicroFramework.navigate('/')\">\n                        Go Home\n                    </button>\n                </div>\n            `);\n        }\n        \n        this.framework.emit(EVENTS.ROUTE_404, { path });\n    }\n\n    /**\n     * Get all registered routes\n     */\n    getRoutes() {\n        return this.routes;\n    }\n\n    /**\n     * Destroy router\n     */\n    destroy() {\n        window.removeEventListener('popstate', this.handleRouteChange);\n        window.removeEventListener('hashchange', this.handleRouteChange);\n    }\n}","import { EVENTS } from './constants.js';\nimport { EventManager } from './EventManager.js';\nimport { ModuleManager } from './ModuleManager.js';\nimport { Router } from './Router.js';\n\nexport class MicroFramework {\n    constructor(options = {}) {\n        // Configuration\n        this.config = {\n            container: options.container || '#app',\n            loadingSpinner: options.loadingSpinner || null, // Optional loading spinner element/selector\n            ...options\n        };\n\n        // Initialize event system first\n        this.eventListeners = new Map();\n        this.eventManager = new EventManager(this, {\n            enableLogging: options.enableEventLogging || false,\n            logPrefix: options.eventLogPrefix || '[MicroFramework Event]'\n        });\n\n        // Initialize subcomponents\n        this.moduleManager = new ModuleManager(this, {\n            moduleBase: options.moduleBase,\n            lazy: options.lazy\n        });\n\n        this.router = new Router(this, {\n            mode: options.router?.mode || options.mode || 'history',\n            base: options.router?.base || options.base || '',\n            hashbang: options.router?.hashbang || options.hashbang || false,\n            beforeEnter: options.router?.beforeEnter || null,\n            afterEnter: options.router?.afterEnter || null,\n            notFoundHandler: options.router?.notFoundHandler || options.notFoundHandler || null\n        });\n        \n        // DOM elements\n        this.moduleContainer = null;  // Where modules render\n        this.loadingSpinner = null;   // Optional loading spinner\n        this.containerObserver = null; // MutationObserver for container changes\n\n        // State\n        this.isStarted = false;\n        this.isLoading = false;\n\n        // Bind methods\n        this.handleLinkClick = this.handleLinkClick.bind(this);\n    }\n\n    /**\n     * Initialize and start the framework\n     */\n    start() {\n        if (this.isStarted) {\n            console.warn('MicroFramework already started');\n            return;\n        }\n\n        this.initializeContainer();\n        this.router.initialize();\n        this.setupEventListeners();\n        this.handleInitialRoute();\n        \n        this.isStarted = true;\n        this.emit(EVENTS.FRAMEWORK_READY);\n        \n        console.log('🚀 MicroFramework started');\n    }\n\n    /**\n     * Validate if the current moduleContainer is still connected to the DOM\n     */\n    isContainerValid() {\n        return this.moduleContainer && \n               this.moduleContainer.isConnected && \n               document.contains(this.moduleContainer);\n    }\n\n    /**\n     * Get the container, re-initializing if necessary\n     */\n    getContainer() {\n        if (!this.isContainerValid()) {\n            console.warn('Container is stale, attempting to re-initialize...');\n            try {\n                this.initializeContainer();\n                this.emit(EVENTS.CONTAINER_REINITIALIZED);\n            } catch (error) {\n                console.error('Failed to re-initialize container:', error);\n                this.emit(EVENTS.CONTAINER_ERROR, error);\n                throw error;\n            }\n        }\n        return this.moduleContainer;\n    }\n\n    /**\n     * Render content to the container\n     */\n    render(content) {\n        const container = this.getContainer();\n        if (typeof content === 'string') {\n            container.innerHTML = content;\n        } else if (content instanceof HTMLElement) {\n            container.innerHTML = '';\n            container.appendChild(content);\n        } else if (typeof content === 'function') {\n            container.innerHTML = '';\n            content(container);\n        }\n    }\n\n    /**\n     * Initialize the module container and optional loading spinner\n     */\n    initializeContainer() {\n        // Clean up existing observer\n        if (this.containerObserver) {\n            this.containerObserver.disconnect();\n            this.containerObserver = null;\n        }\n\n        // Get module container\n        if (typeof this.config.container === 'string') {\n            this.moduleContainer = document.querySelector(this.config.container);\n        } else {\n            this.moduleContainer = this.config.container;\n        }\n\n        if (!this.moduleContainer) {\n            throw new Error('Module container not found');\n        }\n\n        // Get optional loading spinner\n        if (this.config.loadingSpinner) {\n            if (typeof this.config.loadingSpinner === 'string') {\n                this.loadingSpinner = document.querySelector(this.config.loadingSpinner);\n            } else {\n                this.loadingSpinner = this.config.loadingSpinner;\n            }\n        }\n\n        // Set up container monitoring\n        this.setupContainerObserver();\n    }\n\n    /**\n     * Set up MutationObserver to detect container removal/changes\n     */\n    setupContainerObserver() {\n        if (!this.moduleContainer || !this.moduleContainer.parentNode) {\n            return;\n        }\n\n        this.containerObserver = new MutationObserver((mutations) => {\n            let containerRemoved = false;\n            \n            for (const mutation of mutations) {\n                // Check if our container was removed\n                for (const removedNode of mutation.removedNodes) {\n                    if (removedNode === this.moduleContainer || \n                        (removedNode.contains && removedNode.contains(this.moduleContainer))) {\n                        containerRemoved = true;\n                        break;\n                    }\n                }\n                if (containerRemoved) break;\n            }\n\n            if (containerRemoved) {\n                console.warn('Container was removed from DOM');\n                this.emit(EVENTS.CONTAINER_REMOVED);\n                this.moduleContainer = null;\n                \n                // Attempt to recover if framework is still started\n                if (this.isStarted) {\n                    setTimeout(() => this.attemptContainerRecovery(), 100);\n                }\n            }\n        });\n\n        // Observe the parent node for child list changes\n        this.containerObserver.observe(this.moduleContainer.parentNode, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Attempt to recover from container removal\n     */\n    attemptContainerRecovery() {\n        try {\n            console.log('Attempting container recovery...');\n            this.initializeContainer();\n            \n            // Re-render current module if one exists\n            const currentModule = this.moduleManager.getCurrentModule();\n            if (currentModule && currentModule.render) {\n                console.log('Re-rendering current module after container recovery');\n                currentModule.render(this.moduleContainer);\n            }\n            \n            this.emit(EVENTS.CONTAINER_RECOVERED);\n        } catch (error) {\n            console.error('Container recovery failed:', error);\n            this.emit(EVENTS.CONTAINER_RECOVERY_FAILED, error);\n        }\n    }\n\n    /**\n     * Setup global event listeners\n     */\n    setupEventListeners() {\n        // Handle navigation clicks\n        document.addEventListener('click', this.handleLinkClick);\n    }\n\n    /**\n     * Handle link clicks for navigation\n     */\n    handleLinkClick(event) {\n        const link = event.target.closest('[data-route]');\n        if (link) {\n            event.preventDefault();\n            const route = link.dataset.route;\n            this.router.navigate(route);\n        }\n    }\n\n    /**\n     * Handle initial route on startup\n     */\n    handleInitialRoute() {\n        const initialPath = this.router.getCurrentRoute();\n        this.router.navigate(initialPath, { skipHistory: true });\n    }\n\n    /**\n     * Register a module\n     */\n    registerModule(name, module) {\n        return this.moduleManager.registerModule(name, module);\n    }\n\n    /**\n     * Unregister a module\n     */\n    unregisterModule(name) {\n        return this.moduleManager.unregisterModule(name);\n    }\n\n    /**\n     * Register a route\n     */\n    registerRoute(path, options = {}) {\n        return this.router.registerRoute(path, options);\n    }\n\n    /**\n     * Navigate to a route\n     */\n    async navigate(path, options = {}) {\n        return this.router.navigate(path, options);\n    }\n\n    /**\n     * Load a module\n     */\n    async loadModule(name, params = {}) {\n        return this.moduleManager.loadModule(name, params);\n    }\n\n    /**\n     * Get current route\n     */\n    getCurrentRoute() {\n        return this.router.getCurrentRoute();\n    }\n\n    // Getter properties for backward compatibility\n    get modules() {\n        return this.moduleManager.getModules();\n    }\n\n    get routes() {\n        return this.router.getRoutes();\n    }\n\n    get currentModule() {\n        return this.moduleManager.getCurrentModule();\n    }\n\n    get currentRoute() {\n        return this.router.currentRoute;\n    }\n\n\n    /**\n     * Show loading state\n     */\n    showLoading(show) {\n        this.isLoading = show;\n        \n        // Only manipulate spinner if one is configured\n        if (this.loadingSpinner) {\n            this.loadingSpinner.style.display = show ? 'flex' : 'none';\n        }\n        \n        // Always emit the event\n        this.emit(EVENTS.LOADING_CHANGE, show);\n    }\n\n    /**\n     * Show error message\n     */\n    showError(message, error = null) {\n        try {\n            this.render(`\n                <div class=\"mf-error\">\n                    <h1>Error</h1>\n                    <p>${message}</p>\n                    ${error ? `<pre>${error.message}</pre>` : ''}\n                    <button class=\"mf-btn mf-btn-primary\" onclick=\"location.reload()\">\n                        Reload\n                    </button>\n                </div>\n            `);\n        } catch (containerError) {\n            console.error('Failed to show error in container:', containerError);\n            console.error('Original error:', message, error);\n            // Fallback: try to show error in document body or create alert\n            this.showFallbackError(message, error);\n        }\n        this.emit(EVENTS.ERROR, { message, error });\n    }\n\n    /**\n     * Fallback error display when container is unavailable\n     */\n    showFallbackError(message, error = null) {\n        const errorHtml = `\n            <div style=\"position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); \n                        background: #f8d7da; color: #721c24; padding: 20px; border: 1px solid #f5c6cb; \n                        border-radius: 4px; z-index: 10000; max-width: 500px;\">\n                <h2>MicroFramework Error</h2>\n                <p><strong>Container Error:</strong> ${message}</p>\n                ${error ? `<pre style=\"background: #f1f1f1; padding: 10px; border-radius: 3px;\">${error.message}</pre>` : ''}\n                <button onclick=\"location.reload()\" style=\"margin-top: 10px; padding: 8px 16px; \n                        background: #dc3545; color: white; border: none; border-radius: 3px; cursor: pointer;\">\n                    Reload Page\n                </button>\n            </div>\n        `;\n        \n        // Try to append to body\n        if (document.body) {\n            const errorDiv = document.createElement('div');\n            errorDiv.innerHTML = errorHtml;\n            document.body.appendChild(errorDiv);\n        } else {\n            // Ultimate fallback\n            alert(`MicroFramework Error: ${message}${error ? '\\n\\n' + error.message : ''}`);\n        }\n    }\n\n    /**\n     * Get context object for modules\n     */\n    getContext() {\n        return {\n            framework: this,\n            navigate: this.navigate.bind(this),\n            render: this.render.bind(this),\n            emit: this.emit.bind(this),\n            filter: this.filter.bind(this),\n            on: this.on.bind(this),\n            off: this.off.bind(this)\n        };\n    }\n\n    /**\n     * Event system - Add listener\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n\n    /**\n     * Event system - Remove listener\n     */\n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Event system - Emit event (fire and forget)\n     * @param {string} event - The event name\n     * @param {*} data - The event data\n     */\n    emit(event, data = null) {\n        this.eventManager.emit(event, data, 'framework');\n    }\n\n    /**\n     * Event system - Filter data through listeners sequentially\n     * @param {string} event - The event name\n     * @param {*} data - The event data\n     * @returns {Promise<*>} - Final filtered/transformed data\n     */\n    async filter(event, data = null) {\n        return await this.eventManager.filter(event, data, 'framework');\n    }\n\n    /**\n     * Event system - Raw emit (used by EventManager)\n     */\n    emitRaw(event, data = null) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event listener for '${event}':`, error);\n                }\n            });\n        }\n    }\n\n    /**\n     * Event system - Filter that processes data through listeners sequentially\n     */\n    async filterRaw(event, data = null) {\n        if (!this.eventListeners.has(event)) {\n            return data; // No listeners, return original data\n        }\n\n        const listeners = this.eventListeners.get(event);\n        let currentData = data;\n\n        // Process listeners sequentially\n        for (const callback of listeners) {\n            try {\n                const result = callback(currentData);\n                \n                // Check if the result is a Promise (async)\n                if (result && typeof result.then === 'function') {\n                    currentData = await result;\n                } else {\n                    currentData = result;\n                }\n\n                // If listener returns undefined, keep current data unchanged\n                if (currentData === undefined) {\n                    currentData = data;\n                }\n            } catch (error) {\n                console.error(`Error in filter listener for '${event}':`, error);\n                // On error, continue with current data\n            }\n        }\n\n        return currentData;\n    }\n\n    /**\n     * Plugin system - Use plugin\n     */\n    use(plugin) {\n        if (typeof plugin.install === 'function') {\n            plugin.install(this);\n            this.emit(EVENTS.PLUGIN_INSTALLED, plugin);\n        } else {\n            console.warn('Plugin must have an install method');\n        }\n    }\n\n    /**\n     * Destroy the framework\n     */\n    destroy() {\n        // Remove event listeners\n        this.router.destroy();\n        document.removeEventListener('click', this.handleLinkClick);\n\n        // Disconnect container observer\n        if (this.containerObserver) {\n            this.containerObserver.disconnect();\n            this.containerObserver = null;\n        }\n\n        // Destroy current module\n        const currentModule = this.moduleManager.getCurrentModule();\n        if (currentModule && currentModule.destroy) {\n            currentModule.destroy();\n        }\n\n        // Clear container\n        try {\n            this.render('');\n        } catch (error) {\n            // Container already invalid during destroy, which is expected\n            console.log('Container not available during destroy - this is normal');\n        }\n\n        // Clear references\n        this.eventListeners.clear();\n        this.moduleContainer = null;\n        this.loadingSpinner = null;\n\n        this.isStarted = false;\n        this.emit(EVENTS.FRAMEWORK_DESTROYED);\n    }\n\n    // Expose debugging methods\n    getEventHistory() {\n        return this.eventManager.getHistory();\n    }\n\n    clearEventHistory() {\n        this.eventManager.clearHistory();\n    }\n\n    getEventNames() {\n        return this.eventManager.getEventNames();\n    }\n}","/**\n * MicroFramework - A lightweight micro-frontend framework\n * Main entry point that exports all public APIs\n */\n\nimport { MicroFramework } from './MicroFramework.js';\nimport { EVENTS } from './constants.js';\nimport { EventManager } from './EventManager.js';\nimport { ModuleManager } from './ModuleManager.js';\nimport { Router } from './Router.js';\n\n// Make available globally for browser usage\nif (typeof window !== 'undefined') {\n    window.MicroFramework = MicroFramework;\n    window.MicroFramework.EVENTS = EVENTS;\n}\n\n// Default export (primary API)\nexport default MicroFramework;\n\n// Named exports for advanced usage\nexport { \n    MicroFramework,\n    EVENTS,\n    EventManager,\n    ModuleManager,\n    Router\n};\n\n// AMD/CommonJS support for legacy environments\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = MicroFramework;\n    module.exports.EVENTS = EVENTS;\n    module.exports.EventManager = EventManager;\n    module.exports.ModuleManager = ModuleManager;\n    module.exports.Router = Router;\n}\n\nif (typeof define === 'function' && define.amd) {\n    define(() => ({ \n        default: MicroFramework,\n        MicroFramework, \n        EVENTS,\n        EventManager,\n        ModuleManager,\n        Router\n    }));\n}"],"names":["EVENTS","FRAMEWORK_READY","FRAMEWORK_DESTROYED","MODULE_REGISTERED","MODULE_UNREGISTERED","MODULE_LOAD","MODULE_ERROR","ROUTE_REGISTERED","ROUTE_WILL_CHANGE","ROUTE_CHANGE","ROUTE_ERROR","ROUTE_404","LOADING_CHANGE","ERROR","CONTAINER_REINITIALIZED","CONTAINER_REMOVED","CONTAINER_RECOVERED","CONTAINER_RECOVERY_FAILED","CONTAINER_ERROR","PLUGIN_INSTALLED","EventManager","constructor","framework","options","this","config","enableLogging","logPrefix","eventHistory","maxHistorySize","emit","eventName","data","source","isValidEvent","console","warn","log","addToHistory","emitRaw","filter","finalData","filterRaw","Object","values","includes","event","name","timestamp","Date","now","time","toISOString","push","length","shift","getHistory","getEventNames","clearHistory","ModuleManager","modules","Map","currentModule","moduleBase","lazy","registerModule","module","render","Error","set","onRegister","getContext","error","routes","routeCount","Array","isArray","forEach","routeConfig","router","registerRoute","handler","path","entries","routeOptions","normalizedOptions","normalizeRouteOptions","useModuleRender","keys","unregisterModule","get","delete","loadModule","params","showLoading","dynamicImport","beforeMount","destroy","container","getContainer","innerHTML","afterMount","showError","modulePath","moduleExport","import","default","getCurrentModule","getModules","Router","currentRoute","mode","base","hashbang","beforeEnter","afterEnter","notFoundHandler","handleRouteChange","bind","initialize","window","addEventListener","currentPath","getCurrentRoute","navigate","skipHistory","route","exact","description","findMatchingRoute","to","from","updateBrowserUrl","handleRoute","handle404","moduleManager","processTemplate","template","context","replace","match","variable","hasOwnProperty","location","pathname","RegExp","hash","startsWith","substring","has","routePath","matchRoute","actualPath","routeParts","split","actualParts","every","part","index","paramName","fullPath","history","pushState","getRoutes","removeEventListener","MicroFramework","loadingSpinner","eventListeners","eventManager","enableEventLogging","eventLogPrefix","moduleContainer","containerObserver","isStarted","isLoading","handleLinkClick","start","initializeContainer","setupEventListeners","handleInitialRoute","isContainerValid","isConnected","document","contains","content","HTMLElement","appendChild","disconnect","querySelector","setupContainerObserver","parentNode","MutationObserver","mutations","containerRemoved","mutation","removedNode","removedNodes","setTimeout","attemptContainerRecovery","observe","childList","subtree","link","target","closest","preventDefault","dataset","initialPath","show","style","display","message","containerError","showFallbackError","errorHtml","body","errorDiv","createElement","alert","on","off","callback","listeners","indexOf","splice","currentData","result","then","undefined","use","plugin","install","clear","getEventHistory","clearEventHistory","exports","define","amd"],"mappings":"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"}