{"version":3,"file":"micro-framework.min.js","sources":["../src/constants.js","../src/EventManager.js","../src/ModuleManager.js","../src/Router.js","../src/MicroFramework.js","../src/index.js"],"sourcesContent":["/**\n * Centralized Event Registry - All framework events defined here\n */\nexport const EVENTS = {\n    // Framework lifecycle\n    FRAMEWORK_READY: 'framework:ready',\n    FRAMEWORK_DESTROYED: 'framework:destroyed',\n    \n    // Module events  \n    MODULE_REGISTERED: 'module:registered',\n    MODULE_UNREGISTERED: 'module:unregistered',\n    MODULE_LOAD: 'module:load',\n    MODULE_ERROR: 'module:error',\n    \n    // Route events\n    ROUTE_REGISTERED: 'route:registered',\n    ROUTE_CHANGE: 'route:change',\n    ROUTE_ERROR: 'route:error',\n    ROUTE_404: 'route:404',\n    \n    // UI events\n    LOADING_CHANGE: 'loading:change',\n    ERROR: 'error',\n    \n    // Plugin events\n    PLUGIN_INSTALLED: 'plugin:installed'\n};","import { EVENTS } from './constants.js';\n\n/**\n * Event Manager - Handles centralized event emission with debugging\n */\nexport class EventManager {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.config = {\n            enableLogging: options.enableLogging || false,\n            logPrefix: options.logPrefix || '[Event]',\n            ...options\n        };\n        this.eventHistory = [];\n        this.maxHistorySize = 100;\n    }\n\n    /**\n     * Emit an event (fire and forget - no response handling)\n     * @param {string} eventName - The event name\n     * @param {*} data - The event data\n     * @param {string} source - The source of the event\n     */\n    emit(eventName, data = null, source = 'framework') {\n        // Validate event name\n        if (!this.isValidEvent(eventName)) {\n            console.warn(`Unknown event emitted: ${eventName}`);\n        }\n\n        // Log event if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} EMIT ${eventName}`, data);\n        }\n\n        // Track in history\n        this.addToHistory(eventName, data, source);\n\n        // Fire and forget - no response handling\n        this.framework.emitRaw(eventName, data);\n    }\n\n    /**\n     * Emit an event and process data through listeners as a filter chain\n     * @param {string} eventName - The event name\n     * @param {*} data - The event data\n     * @param {string} source - The source of the event\n     * @returns {Promise<*>} - Final filtered/transformed data\n     */\n    async filter(eventName, data = null, source = 'framework') {\n        // Validate event name\n        if (!this.isValidEvent(eventName)) {\n            console.warn(`Unknown event emitted: ${eventName}`);\n        }\n\n        // Log event if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} FILTER ${eventName}`, data);\n        }\n\n        // Track in history\n        this.addToHistory(`${eventName}:filter`, data, source);\n\n        // Process data through filter chain\n        const finalData = await this.framework.filterRaw(eventName, data);\n\n        // Log final data if enabled\n        if (this.config.enableLogging) {\n            console.log(`${this.config.logPrefix} FILTER RESULT ${eventName}`, finalData);\n        }\n\n        // Track final data in history\n        this.addToHistory(`${eventName}:filter-result`, finalData, source);\n\n        return finalData;\n    }\n\n    /**\n     * Check if event name is registered\n     */\n    isValidEvent(eventName) {\n        return Object.values(EVENTS).includes(eventName);\n    }\n\n    /**\n     * Add event to history for debugging\n     */\n    addToHistory(eventName, data, source) {\n        const event = {\n            name: eventName,\n            data,\n            source,\n            timestamp: Date.now(),\n            time: new Date().toISOString()\n        };\n\n        this.eventHistory.push(event);\n        \n        // Keep history size manageable\n        if (this.eventHistory.length > this.maxHistorySize) {\n            this.eventHistory.shift();\n        }\n    }\n\n    /**\n     * Get event history for debugging\n     */\n    getHistory() {\n        return [...this.eventHistory];\n    }\n\n    /**\n     * Get all registered event names\n     */\n    getEventNames() {\n        return Object.values(EVENTS);\n    }\n\n    /**\n     * Clear event history\n     */\n    clearHistory() {\n        this.eventHistory = [];\n    }\n}","import { EVENTS } from './constants.js';\n\n/**\n * ModuleManager - Handles module registration, loading, and lifecycle\n */\nexport class ModuleManager {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.modules = new Map();\n        this.currentModule = null;\n        this.config = {\n            moduleBase: options.moduleBase || './modules/',\n            lazy: options.lazy !== false\n        };\n    }\n\n    /**\n     * Register a module\n     */\n    registerModule(name, module) {\n        if (typeof module !== 'object' || !module.render) {\n            throw new Error('Module must be an object with a render method');\n        }\n\n        this.modules.set(name, {\n            name,\n            ...module\n        });\n\n        // Call onRegister lifecycle hook if defined\n        if (module.onRegister) {\n            try {\n                module.onRegister(this.framework.getContext());\n                console.log(`Module '${name}' onRegister hook executed`);\n            } catch (error) {\n                console.error(`Error in onRegister hook for module '${name}':`, error);\n            }\n        }\n\n        // Auto-register routes if module defines them\n        if (module.routes) {\n            let routeCount = 0;\n            \n            if (Array.isArray(module.routes)) {\n                // Legacy array format - still supported\n                module.routes.forEach(routeConfig => {\n                    if (typeof routeConfig === 'string') {\n                        this.framework.router.registerRoute(routeConfig, { \n                            module: name,\n                            handler: 'default'\n                        });\n                        routeCount++;\n                    } else if (routeConfig.path) {\n                        const options = {\n                            module: name,\n                            handler: routeConfig.handler || 'default',\n                            ...routeConfig\n                        };\n                        delete options.path;\n                        this.framework.router.registerRoute(routeConfig.path, options);\n                        routeCount++;\n                    }\n                });\n            } else if (typeof module.routes === 'object') {\n                // New object format: { '/path': options }\n                Object.entries(module.routes).forEach(([path, routeOptions]) => {\n                    const normalizedOptions = this.normalizeRouteOptions(routeOptions);\n                    const options = {\n                        module: name,\n                        ...normalizedOptions\n                    };\n                    \n                    // If useModuleRender is true, don't provide a handler - module loading is enough\n                    if (normalizedOptions.useModuleRender) {\n                        delete options.useModuleRender;\n                        // Don't set options.handler - module loading is sufficient\n                    }\n                    \n                    this.framework.router.registerRoute(path, options);\n                    routeCount++;\n                });\n            }\n            \n            if (routeCount > 0) {\n                console.log(`Auto-registered ${routeCount} routes for module '${name}'`);\n            }\n        }\n\n        this.framework.emit(EVENTS.MODULE_REGISTERED, { name, module });\n        console.log(`Module '${name}' registered`);\n    }\n\n    /**\n     * Normalize different route option formats into standard options object\n     */\n    normalizeRouteOptions(routeOptions) {\n        if (typeof routeOptions === 'string') {\n            // String shorthand: template string\n            return { handler: routeOptions };\n        } else if (typeof routeOptions === 'function') {\n            // Function shorthand: handler function\n            return { handler: routeOptions };\n        } else if (typeof routeOptions === 'object' && routeOptions !== null) {\n            // Full options object - if empty object or no handler, use module render\n            if (Object.keys(routeOptions).length === 0 || !routeOptions.handler) {\n                return { ...routeOptions, useModuleRender: true };\n            }\n            return routeOptions;\n        } else {\n            // Fallback to module render\n            return { useModuleRender: true };\n        }\n    }\n\n    /**\n     * Unregister a module\n     */\n    unregisterModule(name) {\n        const module = this.modules.get(name);\n        if (module) {\n            this.modules.delete(name);\n            this.framework.emit(EVENTS.MODULE_UNREGISTERED, { name, module });\n            console.log(`Module '${name}' unregistered`);\n        }\n    }\n\n    /**\n     * Load a module\n     */\n    async loadModule(name, params = {}) {\n        this.framework.showLoading(true);\n\n        try {\n            let module = this.modules.get(name);\n\n            // Try dynamic import if module not found\n            if (!module && this.config.lazy) {\n                module = await this.dynamicImport(name);\n            }\n\n            if (!module) {\n                throw new Error(`Module '${name}' not found`);\n            }\n\n            // Call beforeMount hook\n            if (module.beforeMount) {\n                await module.beforeMount(params, this.framework.getContext());\n            }\n\n            // Destroy current module\n            if (this.currentModule && this.currentModule.destroy) {\n                await this.currentModule.destroy();\n            }\n\n            // Clear container and render new module\n            this.framework.moduleContainer.innerHTML = '';\n            await module.render(this.framework.moduleContainer, params, this.framework.getContext());\n\n            // Call afterMount hook\n            if (module.afterMount) {\n                await module.afterMount(this.framework.moduleContainer, params, this.framework.getContext());\n            }\n\n            this.currentModule = module;\n            this.framework.emit(EVENTS.MODULE_LOAD, { name, module, params });\n            \n        } catch (error) {\n            this.framework.emit(EVENTS.MODULE_ERROR, { name, error });\n            this.framework.showError(`Failed to load module: ${name}`, error);\n        } finally {\n            this.framework.showLoading(false);\n        }\n    }\n\n    /**\n     * Dynamic module import\n     */\n    async dynamicImport(name) {\n        try {\n            const modulePath = `${this.config.moduleBase}${name}.js`;\n            const moduleExport = await import(modulePath);\n            const module = moduleExport.default || moduleExport;\n            \n            if (module) {\n                this.registerModule(name, module);\n                return this.modules.get(name);\n            }\n        } catch (error) {\n            console.warn(`Could not dynamically import module: ${name}`, error);\n        }\n        return null;\n    }\n\n    /**\n     * Get current module\n     */\n    getCurrentModule() {\n        return this.currentModule;\n    }\n\n    /**\n     * Get all registered modules\n     */\n    getModules() {\n        return this.modules;\n    }\n}","import { EVENTS } from './constants.js';\n\n/**\n * Router - Handles route registration, navigation, and guards\n */\nexport class Router {\n    constructor(framework, options = {}) {\n        this.framework = framework;\n        this.routes = new Map();\n        this.currentRoute = null;\n        this.config = {\n            mode: options.mode || 'history',\n            base: options.base || '',\n            hashbang: options.hashbang || false,\n            beforeEnter: options.beforeEnter || null,\n            afterEnter: options.afterEnter || null,\n            notFoundHandler: options.notFoundHandler || null // Custom 404 handler\n        };\n\n        // Bind methods\n        this.handleRouteChange = this.handleRouteChange.bind(this);\n    }\n\n    /**\n     * Initialize the router system\n     */\n    initialize() {\n        if (this.config.mode === 'history') {\n            window.addEventListener('popstate', this.handleRouteChange);\n        } else {\n            window.addEventListener('hashchange', this.handleRouteChange);\n        }\n    }\n\n    /**\n     * Handle route changes (browser back/forward)\n     */\n    handleRouteChange() {\n        const currentPath = this.getCurrentRoute();\n        this.navigate(currentPath, { skipHistory: true });\n    }\n\n    /**\n     * Register a route\n     */\n    registerRoute(path, options = {}) {\n        // Handler is required unless module is provided (then module render is used)\n        if (!options.handler && !options.module) {\n            throw new Error('Route must specify either a handler or module in options');\n        }\n\n        // Simplified single signature: registerRoute(path, options)\n        const route = {\n            path,\n            exact: options.exact !== false,\n            beforeEnter: options.beforeEnter,\n            afterEnter: options.afterEnter,\n            module: options.module || null,\n            handler: options.handler || null,\n            ...options\n        };\n\n        this.routes.set(path, route);\n        this.framework.emit(EVENTS.ROUTE_REGISTERED, route);\n        \n        let description = '';\n        if (route.module && route.handler) {\n            description = `module '${route.module}' with handler`;\n        } else if (route.module && !route.handler) {\n            description = `module '${route.module}' (render only)`;\n        } else if (typeof route.handler === 'function') {\n            description = 'function handler';\n        } else if (typeof route.handler === 'string') {\n            description = 'template handler';\n        }\n        \n        console.log(`Route '${path}' registered with ${description}`);\n    }\n\n    /**\n     * Navigate to a route\n     */\n    async navigate(path, options = {}) {\n        const route = this.findMatchingRoute(path);\n        \n        if (!route) {\n            this.handle404(path);\n            return;\n        }\n\n        // Execute global beforeEnter guard\n        if (this.config.beforeEnter) {\n            const result = await this.config.beforeEnter(route, this.currentRoute);\n            if (result === false) {\n                return; // Navigation cancelled\n            }\n        }\n\n        // Execute route-specific beforeEnter guard\n        if (route.beforeEnter) {\n            const result = await route.beforeEnter(route, this.currentRoute);\n            if (result === false) {\n                return; // Navigation cancelled\n            }\n        }\n\n        // Update browser URL\n        if (!options.skipHistory) {\n            this.updateBrowserUrl(path);\n        }\n\n        // Handle the route based on its type\n        try {\n            await this.handleRoute(route);\n            \n            // Execute route-specific afterEnter hook\n            if (route.afterEnter) {\n                route.afterEnter(route, this.currentRoute);\n            }\n\n            // Execute global afterEnter hook\n            if (this.config.afterEnter) {\n                this.config.afterEnter(route, this.currentRoute);\n            }\n\n            this.currentRoute = route;\n            this.framework.emit(EVENTS.ROUTE_CHANGE, route);\n        } catch (error) {\n            this.framework.emit(EVENTS.ROUTE_ERROR, { route, error });\n            console.error('Navigation error:', error);\n        }\n    }\n\n    /**\n     * Handle a route based on its configuration\n     */\n    async handleRoute(route) {\n        // Load module first if specified\n        if (route.module) {\n            await this.framework.moduleManager.loadModule(route.module, route.params);\n        }\n\n        // Execute handler if specified\n        if (route.handler) {\n            if (typeof route.handler === 'function') {\n                // Function handler\n                await route.handler(route.params, this.framework.getContext(), route);\n            } else if (typeof route.handler === 'string') {\n                // Template handler - render string as HTML\n                this.framework.moduleContainer.innerHTML = this.processTemplate(route.handler, route.params, this.framework.getContext());\n            }\n        }\n        // If no handler but module is loaded, that's fine - module.render was called during loadModule\n    }\n\n    /**\n     * Process template string with basic variable substitution\n     */\n    processTemplate(template, params, context) {\n        // Simple template processing - replace {{variable}} with values\n        return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, variable) => {\n            if (params.hasOwnProperty(variable)) {\n                return params[variable];\n            }\n            if (context.hasOwnProperty(variable)) {\n                return context[variable];\n            }\n            return match; // Leave unchanged if no replacement found\n        });\n    }\n\n    /**\n     * Get current route\n     */\n    getCurrentRoute() {\n        if (this.config.mode === 'history') {\n            let path = window.location.pathname;\n            if (this.config.base) {\n                path = path.replace(new RegExp(`^${this.config.base}`), '');\n            }\n            return path || '/';\n        } else {\n            let hash = window.location.hash;\n            if (this.config.hashbang && hash.startsWith('#!')) {\n                return hash.substring(2) || '/';\n            } else if (hash.startsWith('#')) {\n                return hash.substring(1) || '/';\n            }\n            return '/';\n        }\n    }\n\n    /**\n     * Find matching route\n     */\n    findMatchingRoute(path) {\n        // Try exact match first\n        if (this.routes.has(path)) {\n            return { ...this.routes.get(path), params: {} };\n        }\n\n        // Try pattern matching\n        for (const [routePath, route] of this.routes) {\n            const match = this.matchRoute(routePath, path);\n            if (match) {\n                return { ...route, params: match.params };\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Match route with parameters\n     */\n    matchRoute(routePath, actualPath) {\n        const routeParts = routePath.split('/');\n        const actualParts = actualPath.split('/');\n\n        if (routeParts.length !== actualParts.length) {\n            return null;\n        }\n\n        const params = {};\n        const isMatch = routeParts.every((part, index) => {\n            if (part.startsWith(':')) {\n                const paramName = part.substring(1);\n                params[paramName] = actualParts[index];\n                return true;\n            }\n            return part === actualParts[index];\n        });\n\n        return isMatch ? { params } : null;\n    }\n\n    /**\n     * Update browser URL\n     */\n    updateBrowserUrl(path) {\n        if (this.config.mode === 'history') {\n            const fullPath = this.config.base + path;\n            history.pushState({ path }, '', fullPath);\n        } else {\n            const hash = this.config.hashbang ? `#!${path}` : `#${path}`;\n            window.location.hash = hash;\n        }\n    }\n\n    /**\n     * Handle 404 errors\n     */\n    handle404(path) {\n        // Use custom 404 handler if provided\n        if (this.config.notFoundHandler) {\n            if (typeof this.config.notFoundHandler === 'function') {\n                // Function handler - call with path and context\n                this.config.notFoundHandler(path, this.framework.getContext());\n            } else if (typeof this.config.notFoundHandler === 'string') {\n                // String handler - render as HTML with template substitution\n                const template = this.config.notFoundHandler.replace(/\\{\\{path\\}\\}/g, path);\n                this.framework.moduleContainer.innerHTML = template;\n            } else if (typeof this.config.notFoundHandler === 'object' && this.config.notFoundHandler.module) {\n                // Module handler - load a specific module for 404\n                this.framework.moduleManager.loadModule(this.config.notFoundHandler.module, { path });\n            }\n        } else {\n            // Default 404 handler\n            this.framework.moduleContainer.innerHTML = `\n                <div class=\"mf-error mf-error-404\">\n                    <h1>404 - Page Not Found</h1>\n                    <p>The route <code>${path}</code> was not found.</p>\n                    <button class=\"mf-btn mf-btn-primary\" onclick=\"window.MicroFramework.navigate('/')\">\n                        Go Home\n                    </button>\n                </div>\n            `;\n        }\n        \n        this.framework.emit(EVENTS.ROUTE_404, { path });\n    }\n\n    /**\n     * Get all registered routes\n     */\n    getRoutes() {\n        return this.routes;\n    }\n\n    /**\n     * Destroy router\n     */\n    destroy() {\n        window.removeEventListener('popstate', this.handleRouteChange);\n        window.removeEventListener('hashchange', this.handleRouteChange);\n    }\n}","import { EVENTS } from './constants.js';\nimport { EventManager } from './EventManager.js';\nimport { ModuleManager } from './ModuleManager.js';\nimport { Router } from './Router.js';\n\nexport class MicroFramework {\n    constructor(options = {}) {\n        // Configuration\n        this.config = {\n            container: options.container || '#app',\n            loadingSpinner: options.loadingSpinner || null, // Optional loading spinner element/selector\n            ...options\n        };\n\n        // Initialize event system first\n        this.eventListeners = new Map();\n        this.eventManager = new EventManager(this, {\n            enableLogging: options.enableEventLogging || false,\n            logPrefix: options.eventLogPrefix || '[MicroFramework Event]'\n        });\n\n        // Initialize subcomponents\n        this.moduleManager = new ModuleManager(this, {\n            moduleBase: options.moduleBase,\n            lazy: options.lazy\n        });\n\n        this.router = new Router(this, {\n            mode: options.router?.mode || options.mode || 'history',\n            base: options.router?.base || options.base || '',\n            hashbang: options.router?.hashbang || options.hashbang || false,\n            beforeEnter: options.router?.beforeEnter || null,\n            afterEnter: options.router?.afterEnter || null,\n            notFoundHandler: options.router?.notFoundHandler || options.notFoundHandler || null\n        });\n        \n        // DOM elements\n        this.moduleContainer = null;  // Where modules render\n        this.loadingSpinner = null;   // Optional loading spinner\n\n        // State\n        this.isStarted = false;\n        this.isLoading = false;\n\n        // Bind methods\n        this.handleLinkClick = this.handleLinkClick.bind(this);\n    }\n\n    /**\n     * Initialize and start the framework\n     */\n    start() {\n        if (this.isStarted) {\n            console.warn('MicroFramework already started');\n            return;\n        }\n\n        this.initializeContainer();\n        this.router.initialize();\n        this.setupEventListeners();\n        this.handleInitialRoute();\n        \n        this.isStarted = true;\n        this.emit(EVENTS.FRAMEWORK_READY);\n        \n        console.log('🚀 MicroFramework started');\n    }\n\n    /**\n     * Initialize the module container and optional loading spinner\n     */\n    initializeContainer() {\n        // Get module container\n        if (typeof this.config.container === 'string') {\n            this.moduleContainer = document.querySelector(this.config.container);\n        } else {\n            this.moduleContainer = this.config.container;\n        }\n\n        if (!this.moduleContainer) {\n            throw new Error('Module container not found');\n        }\n\n        // Get optional loading spinner\n        if (this.config.loadingSpinner) {\n            if (typeof this.config.loadingSpinner === 'string') {\n                this.loadingSpinner = document.querySelector(this.config.loadingSpinner);\n            } else {\n                this.loadingSpinner = this.config.loadingSpinner;\n            }\n        }\n    }\n\n    /**\n     * Setup global event listeners\n     */\n    setupEventListeners() {\n        // Handle navigation clicks\n        document.addEventListener('click', this.handleLinkClick);\n    }\n\n    /**\n     * Handle link clicks for navigation\n     */\n    handleLinkClick(event) {\n        const link = event.target.closest('[data-route]');\n        if (link) {\n            event.preventDefault();\n            const route = link.dataset.route;\n            this.router.navigate(route);\n        }\n    }\n\n    /**\n     * Handle initial route on startup\n     */\n    handleInitialRoute() {\n        const initialPath = this.router.getCurrentRoute();\n        this.router.navigate(initialPath, { skipHistory: true });\n    }\n\n    /**\n     * Register a module\n     */\n    registerModule(name, module) {\n        return this.moduleManager.registerModule(name, module);\n    }\n\n    /**\n     * Unregister a module\n     */\n    unregisterModule(name) {\n        return this.moduleManager.unregisterModule(name);\n    }\n\n    /**\n     * Register a route\n     */\n    registerRoute(path, options = {}) {\n        return this.router.registerRoute(path, options);\n    }\n\n    /**\n     * Navigate to a route\n     */\n    async navigate(path, options = {}) {\n        return this.router.navigate(path, options);\n    }\n\n    /**\n     * Load a module\n     */\n    async loadModule(name, params = {}) {\n        return this.moduleManager.loadModule(name, params);\n    }\n\n    /**\n     * Get current route\n     */\n    getCurrentRoute() {\n        return this.router.getCurrentRoute();\n    }\n\n    // Getter properties for backward compatibility\n    get modules() {\n        return this.moduleManager.getModules();\n    }\n\n    get routes() {\n        return this.router.getRoutes();\n    }\n\n    get currentModule() {\n        return this.moduleManager.getCurrentModule();\n    }\n\n    get currentRoute() {\n        return this.router.currentRoute;\n    }\n\n    /**\n     * Show loading state\n     */\n    showLoading(show) {\n        this.isLoading = show;\n        \n        // Only manipulate spinner if one is configured\n        if (this.loadingSpinner) {\n            this.loadingSpinner.style.display = show ? 'flex' : 'none';\n        }\n        \n        // Always emit the event\n        this.emit(EVENTS.LOADING_CHANGE, show);\n    }\n\n    /**\n     * Show error message\n     */\n    showError(message, error = null) {\n        this.moduleContainer.innerHTML = `\n            <div class=\"mf-error\">\n                <h1>Error</h1>\n                <p>${message}</p>\n                ${error ? `<pre>${error.message}</pre>` : ''}\n                <button class=\"mf-btn mf-btn-primary\" onclick=\"location.reload()\">\n                    Reload\n                </button>\n            </div>\n        `;\n        this.emit(EVENTS.ERROR, { message, error });\n    }\n\n    /**\n     * Get context object for modules\n     */\n    getContext() {\n        return {\n            framework: this,\n            navigate: this.navigate.bind(this),\n            emit: this.emit.bind(this),\n            filter: this.filter.bind(this),\n            on: this.on.bind(this),\n            off: this.off.bind(this)\n        };\n    }\n\n    /**\n     * Event system - Add listener\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n\n    /**\n     * Event system - Remove listener\n     */\n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Event system - Emit event (fire and forget)\n     * @param {string} event - The event name\n     * @param {*} data - The event data\n     */\n    emit(event, data = null) {\n        this.eventManager.emit(event, data, 'framework');\n    }\n\n    /**\n     * Event system - Filter data through listeners sequentially\n     * @param {string} event - The event name\n     * @param {*} data - The event data\n     * @returns {Promise<*>} - Final filtered/transformed data\n     */\n    async filter(event, data = null) {\n        return await this.eventManager.filter(event, data, 'framework');\n    }\n\n    /**\n     * Event system - Raw emit (used by EventManager)\n     */\n    emitRaw(event, data = null) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event listener for '${event}':`, error);\n                }\n            });\n        }\n    }\n\n    /**\n     * Event system - Filter that processes data through listeners sequentially\n     */\n    async filterRaw(event, data = null) {\n        if (!this.eventListeners.has(event)) {\n            return data; // No listeners, return original data\n        }\n\n        const listeners = this.eventListeners.get(event);\n        let currentData = data;\n\n        // Process listeners sequentially\n        for (const callback of listeners) {\n            try {\n                const result = callback(currentData);\n                \n                // Check if the result is a Promise (async)\n                if (result && typeof result.then === 'function') {\n                    currentData = await result;\n                } else {\n                    currentData = result;\n                }\n\n                // If listener returns undefined, keep current data unchanged\n                if (currentData === undefined) {\n                    currentData = data;\n                }\n            } catch (error) {\n                console.error(`Error in filter listener for '${event}':`, error);\n                // On error, continue with current data\n            }\n        }\n\n        return currentData;\n    }\n\n    /**\n     * Plugin system - Use plugin\n     */\n    use(plugin) {\n        if (typeof plugin.install === 'function') {\n            plugin.install(this);\n            this.emit(EVENTS.PLUGIN_INSTALLED, plugin);\n        } else {\n            console.warn('Plugin must have an install method');\n        }\n    }\n\n    /**\n     * Destroy the framework\n     */\n    destroy() {\n        // Remove event listeners\n        this.router.destroy();\n        document.removeEventListener('click', this.handleLinkClick);\n\n        // Destroy current module\n        const currentModule = this.moduleManager.getCurrentModule();\n        if (currentModule && currentModule.destroy) {\n            currentModule.destroy();\n        }\n\n        // Clear container\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n\n        // Clear references\n        this.eventListeners.clear();\n\n        this.isStarted = false;\n        this.emit(EVENTS.FRAMEWORK_DESTROYED);\n    }\n\n    // Expose debugging methods\n    getEventHistory() {\n        return this.eventManager.getHistory();\n    }\n\n    clearEventHistory() {\n        this.eventManager.clearHistory();\n    }\n\n    getEventNames() {\n        return this.eventManager.getEventNames();\n    }\n}","/**\n * MicroFramework - A lightweight micro-frontend framework\n * Main entry point that exports all public APIs\n */\n\nimport { MicroFramework } from './MicroFramework.js';\nimport { EVENTS } from './constants.js';\nimport { EventManager } from './EventManager.js';\nimport { ModuleManager } from './ModuleManager.js';\nimport { Router } from './Router.js';\n\n// Make available globally for browser usage\nif (typeof window !== 'undefined') {\n    window.MicroFramework = MicroFramework;\n    window.MicroFramework.EVENTS = EVENTS;\n}\n\n// Default export (primary API)\nexport default MicroFramework;\n\n// Named exports for advanced usage\nexport { \n    MicroFramework,\n    EVENTS,\n    EventManager,\n    ModuleManager,\n    Router\n};\n\n// AMD/CommonJS support for legacy environments\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = MicroFramework;\n    module.exports.EVENTS = EVENTS;\n    module.exports.EventManager = EventManager;\n    module.exports.ModuleManager = ModuleManager;\n    module.exports.Router = Router;\n}\n\nif (typeof define === 'function' && define.amd) {\n    define(() => ({ \n        default: MicroFramework,\n        MicroFramework, \n        EVENTS,\n        EventManager,\n        ModuleManager,\n        Router\n    }));\n}"],"names":["EVENTS","FRAMEWORK_READY","FRAMEWORK_DESTROYED","MODULE_REGISTERED","MODULE_UNREGISTERED","MODULE_LOAD","MODULE_ERROR","ROUTE_REGISTERED","ROUTE_CHANGE","ROUTE_ERROR","ROUTE_404","LOADING_CHANGE","ERROR","PLUGIN_INSTALLED","EventManager","constructor","framework","options","this","config","enableLogging","logPrefix","eventHistory","maxHistorySize","emit","eventName","data","source","isValidEvent","console","warn","log","addToHistory","emitRaw","filter","finalData","filterRaw","Object","values","includes","event","name","timestamp","Date","now","time","toISOString","push","length","shift","getHistory","getEventNames","clearHistory","ModuleManager","modules","Map","currentModule","moduleBase","lazy","registerModule","module","render","Error","set","onRegister","getContext","error","routes","routeCount","Array","isArray","forEach","routeConfig","router","registerRoute","handler","path","entries","routeOptions","normalizedOptions","normalizeRouteOptions","useModuleRender","keys","unregisterModule","get","delete","loadModule","params","showLoading","dynamicImport","beforeMount","destroy","moduleContainer","innerHTML","afterMount","showError","modulePath","moduleExport","import","default","getCurrentModule","getModules","Router","currentRoute","mode","base","hashbang","beforeEnter","afterEnter","notFoundHandler","handleRouteChange","bind","initialize","window","addEventListener","currentPath","getCurrentRoute","navigate","skipHistory","route","exact","description","findMatchingRoute","updateBrowserUrl","handleRoute","handle404","moduleManager","processTemplate","template","context","replace","match","variable","hasOwnProperty","location","pathname","RegExp","hash","startsWith","substring","has","routePath","matchRoute","actualPath","routeParts","split","actualParts","every","part","index","paramName","fullPath","history","pushState","getRoutes","removeEventListener","MicroFramework","container","loadingSpinner","eventListeners","eventManager","enableEventLogging","eventLogPrefix","isStarted","isLoading","handleLinkClick","start","initializeContainer","setupEventListeners","handleInitialRoute","document","querySelector","link","target","closest","preventDefault","dataset","initialPath","show","style","display","message","on","off","callback","listeners","indexOf","splice","currentData","result","then","undefined","use","plugin","install","clear","getEventHistory","clearEventHistory","exports","define","amd"],"mappings":"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"}